openapi: 3.0.1
info:
  title: FA server API
  description: 'FA server API'
  version: 1.0.0
servers:
  - url: http://{host}

paths:
  /api/authorize:
    post:
      summary: Authorize using email password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizeResponse'
      security:
        - PublicAuth: [ ]
      operationId: authorize
      tags: [ auth ]

  /api/oauth-authorization-links:
    get:
      summary: Authorization oauth links
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationLinksResponse'
      security:
        - PublicAuth: [ ]
      operationId: authorizationLinks
      tags: [ auth ]

  /api/authorize-oauth:
    post:
      summary: Authorize via oauth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeOauthRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizeResponse'
      security:
        - PublicAuth: [ ]
      operationId: authorizeOauth
      tags: [ auth ]

  /api/registration/start:
    post:
      summary: Start registration with email password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
      security:
        - PublicAuth: [ ]
      operationId: startRegistration
      tags: [ registration ]

  /api/register/confirm:
    post:
      summary: Confirm registration with email password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitRegistrationRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizeResponse'
      security:
        - PublicAuth: [ ]
      operationId: confirmRegistration
      tags: [ registration ]

  /api/user:
    put:
      summary: Update user information
      requestBody:
        description: Updated user data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        200:
          description: Success
      security:
        - TokenAuth: [ ]
      operationId: updateUser
      tags: [ user ]
    delete:
      summary: Delete user
      responses:
        200:
          description: Success
      security:
        - TokenAuth: [ ]
      operationId: deleteUser
      tags: [ user ]

  /api/user/change-email:
    post:
      summary: Change email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmailRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeEmailResponse'
      security:
        - TokenAuth: [ ]
      operationId: changeEmail
      tags: [ user ]

  /api/user/change-email-confirmation:
    post:
      summary: Confirm change email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmailConfirmationRequest'
        required: true
      responses:
        200:
          description: Success
      security:
        - PublicAuth: [ ]
      operationId: confirmChangeEmail
      tags: [ user ]

  /api/user/check-email-uniqueness/{email}:
    get:
      summary: Check email uniqueness
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: Return true if such e-mail already exists
      responses:
        200:
          description: Success
          content:
            'application/json':
              schema:
                type: boolean
      security:
        - PublicAuth: [ ]
      operationId: existsByEmail
      tags: [ user ]

  /api/user/request-password-reset:
    post:
      summary: Request password reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPasswordResetRequest'
        required: true
      responses:
        200:
          description: Success
      security:
        - PublicAuth: [ ]
      operationId: requestPasswordReset
      tags: [ user ]

  /api/user/reset-password:
    post:
      summary: Reset password with reset id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizeResponse'
      security:
        - PublicAuth: [ ]
      operationId: resetPassword
      tags: [ user ]

  /api/user/change-password:
    post:
      summary: Change password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      responses:
        200:
          description: Success
      security:
        - TokenAuth: [ ]
      operationId: changePassword
      tags: [ user ]

  /api/user/set-password:
    post:
      summary: Set password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
        required: true
      responses:
        200:
          description: Success
      security:
        - TokenAuth: [ ]
      operationId: setPassword
      tags: [ user ]

  /api/user/get-me:
    get:
      summary: Get user information
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMeResponse'
      security:
        - TokenAuth: [ ]
      operationId: getMe
      tags: [ user ]

  /api/publication:
    post:
      summary: Create publication
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePublicationResponse'
      security:
        - TokenAuth: [ ]
      operationId: createPublication
      tags: [ publication ]

  /api/publication/{id}:
    get:
      summary: Get publication
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Publication id
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
      security:
        - TokenAuth: [ ]
      operationId: getPublication
      tags: [ publication ]
    patch:
      summary: Edit publication
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Publication id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationEditRequest'
        required: true
      responses:
        200:
          description: Success
      security:
        - TokenAuth: [ ]
      operationId: editPublication
      tags: [ publication ]

  /api/publication/{id}/submit:
    put:
      summary: Submit publication
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Publication id
        - in: query
          name: accessType
          schema:
            $ref: '#/components/schemas/AccessType'
          required: true
          description: Access level for publication
      responses:
        200:
          description: Success
      security:
        - TokenAuth: [ ]
      operationId: submitPublication
      tags: [ publication ]

  /api/publication/{id}/request-download:
    put:
      summary: Request publication archive download
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Publication id
      responses:
        200:
          description: Success
      security:
        - TokenAuth: [ ]
      operationId: requestDownload
      tags: [ publication ]

  /api/publication/{id}/download-link:
    get:
      summary: Get publication content download link
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Publication id
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
      security:
        - TokenAuth: [ ]
      operationId: getDownloadLink
      tags: [ publication ]

  /api/files/upload:
    post:
      summary: Upload file
      parameters:
        - in: query
          name: publicationId
          schema:
            type: string
            format: uuid
          required: true
          description: Publication id
        - in: query
          name: fullPath
          schema:
            type: string
          required: true
          description: Full file path
        - in: query
          name: isDir
          schema:
            type: boolean
          required: true
          description: Is this file or directory
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationFile'
      security:
        - TokenAuth: [ ]
      operationId: uploadFile
      tags: [ file ]

  /api/files/download/{file_id}:
    get:
      summary: Download a file
      description: Retrieves a file for download based on the provided file ID.
      parameters:
        - name: file_id
          in: path
          description: ID of the file to download
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '404':
          description: File not found
        '500':
          description: Server error
      security:
        - PublicAuth: [ ]
      operationId: downloadPublicationFile
      tags: [ file ]

  /api/author/{searchText}:
    get:
      summary: Get users by search text
      parameters:
        - in: path
          name: searchText
          schema:
            type: string
          required: true
          description: Search text for users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
      security:
        - TokenAuth: [ ]
      operationId: getAuthors
      tags: [ author ]

  /api/files:
    parameters:
      - in: query
        name: publicationId
        schema:
          type: string
          format: uuid
        required: true
        description: Publication id
    get:
      summary: Get files by publication id
      parameters:
        - in: query
          name: dirPath
          schema:
            type: string
          required: true
          description: Directory path
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicationFile'
      security:
        - TokenAuth: [ ]
      operationId: getPublicationFiles
      tags: [ file ]
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationFile'
      security:
        - TokenAuth: [ ]
      operationId: createFolder
      tags: [ file ]

  /api/files/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
        description: Id of file or directory
    put:
      summary: Patch file
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditFileRequest'
        required: true
      responses:
        200:
          description: Success
      security:
        - TokenAuth: [ ]
      operationId: editFile
      tags: [ file ]

  /api/files/deleteByIds:
    delete:
      summary: Delete file by id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteByIdsRequest'
      responses:
        200:
          description: Success
      security:
        - TokenAuth: [ ]
      operationId: deleteFiles
      tags: [ file ]

  /api/files/move/{id}:
    post:
      summary: Move file by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Id of file or directory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveFileRequest'
        required: true
      responses:
        200:
          description: Success
      security:
        - TokenAuth: [ ]
      operationId: moveFile
      tags: [ file ]

components:
  schemas:
    PublicationFile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        publicationId:
          type: string
          format: uuid
        fullPath:
          type: string
        description:
          type: string
        dirPath:
          type: string
        isDir:
          type: boolean
        creationTime:
          type: string
          format: date-time

    EditFileRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name

    DeleteByIdsRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            format: uuid
      required:
        - ids

    MoveFileRequest:
      type: object
      properties:
        newDirPath:
          type: string
          minLength: 0
      required:
        - newDirPath

    CreateFolderRequest:
      type: object
      properties:
        dirPath:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - dirPath
        - name

    SubmitRegistrationRequest:
      type: object
      properties:
        registrationToken:
          type: string
          format: uuid
        code:
          type: string
      required:
        - registrationToken
        - code

    RegistrationRequest:
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
          minLength: 8
      required:
        - email
        - password

    RegistrationResponse:
      type: object
      properties:
        registrationToken:
          type: string
          format: uuid
      required:
        - registrationToken

    PasswordChangeRequest:
      type: object
      properties:
        newPassword:
          type: string
          minLength: 8
        previousPassword:
          type: string
          minLength: 8
      required:
        - newPassword
        - previousPassword

    SetPasswordRequest:
      type: object
      properties:
        newPassword:
          type: string
          minLength: 8
      required:
        - newPassword

    PasswordResetRequest:
      type: object
      properties:
        password:
          type: string
          minLength: 8
        passwordResetRequestId:
          type: string
          format: uuid
      required:
        - password
        - code

    RequestPasswordResetRequest:
      type: object
      properties:
        email:
          type: string
      required:
        - email

    SendPasswordResetLinkRequest:
      type: object
      properties:
        email:
          type: string
      required:
        - email

    AuthorizeRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 8
      required:
        - email
        - password

    AuthorizeOauthRequest:
      type: object
      properties:
        code:
          type: string
          maxLength: 2048
        type:
          $ref: '#/components/schemas/OauthType'
      required:
        - code
        - type

    AuthorizeResponse:
      type: object
      properties:
        token:
          type: string

    AuthorizationLinksResponse:
      type: object
      properties:
        google:
          type: string
          maxLength: 2048
        facebook:
          type: string
          maxLength: 2048
        linkedin:
          type: string
          maxLength: 2048
        orcid:
          type: string
          maxLength: 2048

    ChangeEmailRequest:
      type: object
      properties:
        email:
          type: string
      required:
        - email

    ChangeEmailResponse:
      type: object
      properties:
        confirmationToken:
          type: string
          format: uuid
      required:
        - confirmationToken

    ChangeEmailConfirmationRequest:
      type: object
      properties:
        confirmationToken:
          type: string
          format: uuid
        code:
          type: string
      required:
        - confirmationToken
        - code

    CreatePublicationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PublicationStatus'
        contentStatus:
          $ref: '#/components/schemas/PublicationContentStatus'
        creationTime:
          type: string
          format: date-time
        publicationTime:
          type: string
          format: date-time
      required:
        - id
        - status
        - creationTime

    GetMeResponse:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
        canSetPassword:
          type: boolean
        canChangePassword:
          type: boolean
        selfInfo:
          type: string
        signedVia:
          type: array
          items:
            $ref: '#/components/schemas/OauthType'

    OauthType:
      type: string
      enum:
        - GOOGLE
        - FACEBOOK
        - LINKEDIN
        - ORCID

    PublicationStatus:
      type: string
      enum:
        - PENDING
        - READY_FOR_PUBLICATION
        - PUBLISHED

    PublicationContentStatus:
      type: string
      enum:
        - PENDING
        - INSTANT
        - ENCRYPTED
        - ARCHIVE
        - ABSENT

    AccessType:
      type: string
      enum:
        - OPEN
        - ON_REQUEST
        - MONETIZE_OR_CO_AUTHORSHIP

    UserUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        username:
          type: string
        selfInfo:
          type: string
      required:
        - firstName
        - lastName
        - username

    PublicationEditRequest:
      type: object
      properties:
        confirmedAuthors:
          $ref: '#/components/schemas/ConfirmedAuthors'
        unconfirmedAuthors:
          $ref: '#/components/schemas/UnconfirmedAuthors'
        title:
          $ref: '#/components/schemas/PublicationStringValue'
        description:
          $ref: '#/components/schemas/PublicationStringValue'
        grantOrganizations:
          $ref: '#/components/schemas/PublicationStringArrayValue'
        relatedArticles:
          $ref: '#/components/schemas/PublicationStringArrayValue'
        tags:
          $ref: '#/components/schemas/PublicationStringArrayValue'
        objectOfStudyTitle:
          $ref: '#/components/schemas/PublicationStringValue'
        objectOfStudyDescription:
          $ref: '#/components/schemas/PublicationStringValue'
        software:
          $ref: '#/components/schemas/PublicationStringValue'
        methodTitle:
          $ref: '#/components/schemas/PublicationStringValue'
        methodDescription:
          $ref: '#/components/schemas/PublicationStringValue'
        predictedGoals:
          $ref: '#/components/schemas/PublicationStringValue'

    PublicationStringValue:
      type: object
      properties:
        edited:
          type: boolean
        value:
          type: string

    PublicationStringArrayValue:
      type: object
      properties:
        edited:
          type: boolean
        values:
          type: array
          items:
            type: string

    ConfirmedAuthors:
      type: object
      properties:
        edited:
          type: boolean
        values:
          type: array
          items:
            type: string
            format: uuid

    UnconfirmedAuthors:
      type: object
      properties:
        edited:
          type: boolean
        values:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              firstName:
                type: string
              middleName:
                type: string
              lastName:
                type: string
              shortBio:
                type: string
            required:
              - email
              - firstName
              - lastName

    Publication:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PublicationStatus'
        accessType:
          $ref: '#/components/schemas/AccessType'
        contentStatus:
          $ref: '#/components/schemas/PublicationContentStatus'
        creationTime:
          type: string
          format: date-time
        publicationTime:
          type: string
          format: date-time
        title:
          type: string
        description:
          type: string
        grantOrganizations:
          type: array
          items:
            type: string
        relatedArticles:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        objectOfStudyTitle:
          type: string
        objectOfStudyDescription:
          type: string
        software:
          type: string
        methodTitle:
          type: string
        methodDescription:
          type: string
        predictedGoals:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
      required:
        - id
        - status
        - creationTime

    Author:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        email:
          type: string
        shortBio:
          type: string
      required:
        - firstName
        - middleName
        - lastName
        - email
        - shortBio

  securitySchemes:
    PublicAuth:
      description: Public access
      type: http
      scheme: mutual

    TokenAuth:
      description: Access with auth JWT token
      type: http
      scheme: bearer
